챕터 1,2

1. 자바
   1.1 자바란
프로그래밍 언어
컴퓨터 프로그램을 만드는데 사용
실행환경(JRE) + 개발도구(JDK) + 라이브러리(API)

   1.2 자바의 역사
   1.3 자바언어의 특징
-운영체제의 독립적이다.
-객체지향언어이다.
-비교적 배우기 쉽다.
- 자동 메모리 관리
-네트워크와 분산처리를 지원한다
-멀티쓰레드를 지원한다
-동적 로딩을 지원한다

   1.4 jvm
자바를 시행하기 위한 가상 기계

2. 자바개발환경 구축하기
   2.1 자바 개발도구(JDK)설치하기
   2.2 java API문서 설치하기

3. 자바로 프로그램작성하기
   3.1 Hello.java

   3.2 자주 발생하는 에러와 해결방법
   3.3 자바프로그램의 실행과정
   3.4 주석(comment)
범위 주석   /* */ 사이의 내용이 주석
한 줄 주석 //부터 라인 끝까지의 내용이 주석
   3.5 이 책으로 공부하는 방법
2장부터 5장 마스터 후 6장으로 넘어가야함



이클립스에서 자바 프로그램을 작성하는 순서
 1. 프로젝트를 생성한다.
    - 메뉴 파일 - 뉴 - 자바 프로젝트

  2. 클래스를 생성한다
    - 프로젝트 이름 위에서 우클릭 - 뉴 -클래스
  3. 소스파일의 작성 후 저장 (자동 컴파일됨)
  4. 실행 메뉴 런 - 런




1. 변수와 상수
   1.1 변수란 ?
값을 지정할 수 있는 메모리상의 공간을 의미
단 하나의 값을 저장할 수 있음
새로운 값을 저장하면 기본의 값은 사라짐

   1.2 변수의 선언과 초기화
int age; // age 라는 이름의 변수를 선언
변수타입 변수이름

변수를 선언한 이후 사용할 수 있으나 그전에 반드시 변수를 초기화 해야함
= 오른쪽을 값을 왼쪽에 저장 
int age = 25
변수타입 변수이름 


   1.3 변수의 명명규칙
1. 대소문자가 구분되며 길이에 제한이 없다. 
2. 예약어를 사용해서는 안 된다. 
3. 숫자로 시작해서는 안 된다.
4. 특수문자는 '_' 와 '$' 만을 허용한다.
5. 클래스 이름의 첫 글자는 항상 대문자로 한다. - 변수와 매서드의 이름의 첫 글자는 항상 소문자로 한다.
6. 여러 단어로 이루어진 이름은 단어의 첫 글자를 대문자로 한다.
7. 상수의 이름은 모두 대문자로 한다. 여러 단어로 이루어진 경우'_' 로 구분한다.

2. 변수의 타입
   2.1 기본형(primitive type)
기본형과 참조형 두가지로 나눌 수 있다.
기본형 변수 - 실제 값(data)을 저장 - 논리형, 문자형, 정수형, 실수형 계산을 위한 실제 값을 저장한다.
참조형 변수 - 어떤 값이 저장되어 있는 주소(memory address)를 갖는다. - 객체의 주소를 저장한다. 8개의 제외한 나머지 타입.

클래스이름 변수이름; // 변수의 타입이 기본형이 아닌 것들은 모두 참조변수이다.

Date today = new Data () ; // Data 객체를 생성해서, 그 주소를 today에 저장

   2.2 상수와 리터럴(constant and literal)

상수 (constant) 는 변수와 마찬가지로 '값을 저장할 수 있는 공간'이지만, 변수와 달리 한 번 값을 저장하면 다른 값으로 변경할 수 없다.
final int MAX_SPEED = 10;    // 상수 MAX_SPEED를 선언 초기화

final int MAX_SPEED;    // 에러. 상수는 선언과 동시에 초기화 해야함

리터럴 - 상수의 다른 이름(상수를 '값을 한 번 지정하면 변경할 수 없는 저장 공간'으로 정의하였기 떄문에 구분하기 위해)

변수 - 하나의 값을 저장하기 위한 공간
상수 - 값을 한번만 저장할 수 있는 공간
리터럴 - 그 자체로 값을 의미하는 것

final int MAX_VALUE = 100;

상수가 필요한 이유
int triangleArea = (20 * 10) / 2;  // 삼각형의 면적을 구하는 공식
int rectangleArea = 20 * 10       // 사각형의 면적을 구하는 공식

final int WIDTH = 20;  //폭
final int HEIGHT = 10; //높이

리터럴 타입과 접미사
논리형 - false, ture
정수형 - 123, 0b0101, 077, 0xFF, 100L
실수형 - 3.14, 3.0e8, 1.4f, 0x1.0p-1
문자형 - 'A', '1', '￦n'
문자열 - "ABC", "123", "A", "true"

문자 리터럴과 문자열 리터럴
char ch = 'J';   // char ch = 'Java'; 이렇게 할 수 없다 한 문자만 가능
String name = "Java";   // 변수 name에 문자열 리터럴 "Java" 를 저장

string str = "";  // ok 내용이 없어도 가능
char ch  = '';  // 에러 ''안에 반드시 문자 하나 넣어야함 공백도 가능

string name = "Ja" + "va";  // name은 "Java"
string str = name + 8.0;  // str은 "Java8.0"

문자열 + any type          문자열 + 문자열 = 문자열
any type + 문자열          문자열 + 문자열 = 문자열

   2.3 형식화된 출력 - printf()  ----

   2.4 화면에서 입력받기 - Scanner
import java.util.*;  // 스캐너클래스를 사용하기 위해 추가
Scanner scanner = new Scanner(System.in); // 스캐너클래스의 객체를 생성


4. 기본형 (primitive type)
   4.1 논리형 - boolean
ture or false 중 하나를 저장 
기본값은 false
boolean 변수는 대답(yes/no), 스위치(on/off) 등의 논리구현에 주로 사용
boolean power   = ture;
boolean checked = false;

   4.2 문자형 - char
문자를 저장하기 위한 변수를 선언할때 사용
단 하나의 문서만을 저장 가능
char ch = 'A'; // 문자 'A'를 char 타입의 변수 ch에 저장.
문자가 아닌 문자의 유니코드(정수)가 저장된다
char ch = 'A';
char ch = '65'; // 문자 코드를 직접 변수 ch에 저장

특수문자 다루기 
 
   4.3 정수형 - byte, short, int, long
byte(1)  <  short(2)  <  int(4)  <  long(8)

정수형의 오버플로우 
최댓값 +1 = 최소값
최소값 -1 = 최대값
   4.4 실수형 - float, double


5. 형변환
   5.1 형변환(캐스팅, casting)이란?
변수 또는 상수의 타입을 다른 타입으로 변환하는 것
모든 변수와 리터럴에는 타입이 있음 서로다른 타입간의 연산을 수행하기 위해 필요

   5.2 형변환 방법
(타입)피연산자
double d = 85.4;
int score = (int)d;   //  double타입의 변수 d를 int타입으로 형변환

   5.3 정수형 간의 형변환
큰 타입에서 작은 타입으로의 변환 
크기 차이만큼 잘려나간다. 값손실(loss of data)

   5.4 실수형 간의 형변환
실수형에서도 정수형처럼 작은 타입에서 큰 타입으로 변화하는 경우 
빈 공간을 0으로 채운다.

   5.5 정수형과 실수형간의 형변환

   5.6 자동 형변환
